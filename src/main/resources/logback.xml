<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="true" scanPeriod="60 seconds" debug="false">
    <!--property：属性，使用${}来引用-->
    <property name="projectName" value="testLog4j"/>
    <!--contextName：区分不同的应用程序-->
    <contextName>${projectName}</contextName>

    <!--appender：输出类型-->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <!--系统定义的拦截器，例如我们用ThresholdFilter来过滤掉INFO级别以下的日志不输出到文件中-->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>INFO</level>
        </filter>

        <!--格式化输出-->
        <encoder charset="UTF-8" class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>[logback] %-5level %d{MMdd HH:mm:ss} \(%F:%L\) %method\(\) - %m%n
            </pattern>
        </encoder>
    </appender>
    <!-- 按照每天生成日志文件 -->
    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>logback/web/${projectName}.log</file>
        <Encoding>UTF-8</Encoding>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--日志文件输出的文件名-->
            <!-- 每天一归档 -->
            <FileNamePattern>logback/web/${projectName}.%d{yyyy-MM-dd}.%i.log</FileNamePattern>
            <!-- 单个日志文件最多 100MB, 30天的日志周期，最大不能超过20GB -->
            <!--MaxHistory:可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件,，例如设置为30的话，则30天之后，旧的日志就会被删除-->
            <MaxHistory>30</MaxHistory>
            <totalSizeCap>20GB</totalSizeCap>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <!-- or whenever the file size reaches 100MB -->
                <maxFileSize>100MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <!--格式化输出-->
        <layout class="ch.qos.logback.classic.PatternLayout">
            <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符-->
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n
            </pattern>
        </layout>
    </appender>

    <!--必选节点，用来指定最基础的日志输出级别-->
    <root>
        <!--指定日志级别应用到哪个appender-->
        <!--指定WARN级别到name="FILE"、"CONSOLE"的appender中-->
        <appender-ref ref="FILE"/>
        <appender-ref ref="CONSOLE"/>
        <!--输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL-->
        <level value="DEBUG"/>
    </root>
</configuration>